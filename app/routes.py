from flask import request, Response
from app import app, db
import json
from app.general import is_date_args_valid, send_response, export_to_csv

from app.contollers import *

BookService = BookService()
HistoryService = HistoryService()

# Retrieve a list of all available books
@app.route('/books',methods = ['GET'])
def get_all_books():
   data = BookService.get_all_books()
   return send_response(data,"success",200)


# Retrieve a list of available books based on a specified category.
@app.route('/author/<author>',methods = ['GET'])
def get_all_books_by_author(author):

   data = BookService.get_book_by_identifier('author',author)

   if data:
      return send_response(data,"success",200)
   return send_response("Books not found","error",404)
   
               
# Retrieve detailed information about a specific book.
@app.route('/book/<id>',methods = ['GET'])
def get_all_books_by_id(id):

   data = BookService.get_book_by_identifier('isbn',id)

   if data:
      return send_response(data,"success",200)         
   return send_response("Books not found","error",404)


# Retrieve a list of available books that was released by a specific publisher
@app.route('/publisher/<publisher>',methods = ['GET'])
def get_all_books_by_publisher(publisher):

   data = BookService.get_book_by_identifier('publisher',publisher)

   if data:
      return send_response(data,"success",200)
   return send_response("Books not found","error",404)


#Retrieve a list of available books that was released on a specific year or between certain dates (e.g., from 2000 to 2005)
@app.route('/date/<date>',methods = ['GET'])
def get_all_books_by_date(date):

   data = BookService.get_book_by_identifier('year_of_publication',date)

   if data:

      return send_response(data,"success",200)
   return send_response("Books not found","error",404)


#Rent a book, making it unavailable for others to rent.
@app.route('/rent/<id>',methods = ['POST'])
def set_book_as_rented(id):
   
   data = BookService.is_available_for_rent(id)

   if not data:
      return send_response("Book not available for rent","error",400)
   else:
      BookService.rent_book(data,db)
      return send_response("Book rented successfully","success",200)
   

# Return a rented book and calculate the rental fee based on the number of days rented.
@app.route('/return/<id>',methods = ['PUT'])
def get_rented_book(id):

      data = HistoryService.get_rented_book(id)

      if(data):

         rental_fee = HistoryService.return_book(data,db)

         return Response(json.dumps({"status":"success","status code":200,"message": "Book returned successfully", "rental_fee": rental_fee}), content_type='application/json', status=200)
      return Response(json.dumps({"status":"error","status code":400,"message": "Book not found or not currently rented"}), content_type='application/json', status=400)


# Retrieve a list of books that were rented within a specified date range.
@app.route('/rentals',methods = ['GET'])
def get_rentals():
      
   # 1. Check if the url with date pars has changed or contains invalid pars
   if is_date_args_valid(request.args):
  
      start_date = request.args.get('start')
      end_date = request.args.get('end')

      #2.Find all books that have been rented on a specific period
      data = HistoryService.get_all_rented_books_for_period(start_date,end_date,'list')

      export_to_csv(data,"Rentals")

      return send_response(data,"success",200) 
   return send_response("Please provide valid dates","error",400) 


#Calculate and retrieve the total revenue generated by book rentals within a specified date range.
@app.route('/revenue',methods = ['GET'])
def get_total_revenue():

   if not is_date_args_valid(request.args): 
      return send_response("Please provide valid dates","error",400) 
    
   start_date = request.args.get('start')
   end_date = request.args.get('end')

   #1.Find all books that have been rented on a specific period
   rentedBooks = HistoryService.get_all_rented_books_for_period(start_date,end_date,'instances')

   #2. Calculate total revenue for this specific range
   data = HistoryService.calculate_total_rental_fee(rentedBooks)

   export_to_csv(data,"totalRevenue")
      
   if data > 0: return send_response(data,"success",200) 
   return send_response("There is not total revenue on this range","success",200)

